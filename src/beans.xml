<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <!-- 导入src目录下的jdbc.properties文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
	<!-- 打开spring的Annotation支持 -->
	<context:annotation-config/>
	
	<!-- 设定spring去哪些包中找Annotation-->
	<context:component-scan base-package="com"/>
    
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    	<property name="driverClassName" value="${jdbc.driverClassName}"/>
    	<property name="username" value="${jdbc.username}"/>
    	<property name="password" value="${jdbc.password}"/>
    	<property name="url" value="${jdbc.url}"/>
    	<property name="defaultAutoCommit" value="true"></property>
    	
    	<!-- 配置连接池的初始值 -->
    	<!--<property name="initialSize" value="1"/>
    	<property name="minIdle" value="1"/> -->
    	<property name="maxActive" value="100"/>
    	<property name="maxIdle" value="20"/>
    	<property name="maxWait" value="1000"/>
    </bean>

    <!-- 创建Spring的SessionFactory工厂 -->
    <!-- 如果使用的是Annotation的方式，不能使用LocalSessionFactoryBean -->
    <bean id="sessionFactory" 
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource"><ref local="dataSource"/></property>
		<!-- 设置Spring去哪个包中查找相应的实体类 -->
		<property name="packagesToScan">
				<value>com.model</value>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop> 
			</props>
		</property>
	</bean>
	
	<!-- 开启HibernateTemplate,并且为其注入SessionFactory
	使用HibernateTemplate不太方便的就是要获取session得通过getSessionFactory()方法获取 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
    <!-- 配置Hibernate事务管理器 -->
	<bean id="txManager"
    	class="org.springframework.orm.hibernate3.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
   </bean>
   
   <!-- 配置AOP,Spring是通过AOP来进行事物管理的 -->
   <aop:config>
   <!-- 设置pointCut表示哪些方法要加入事务处理 -->
   <!-- 以下的事务是申明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等 
   		就会导致数据不完整，所以事物不应该在DAO层处理，而应该在Service-->
   <aop:pointcut expression="execution(*com.service.*.*(..))" id="allMethods"/>
   </aop:config>
   <!-- 配置哪些方法要加入事务控制 -->
   <tx:advice id="txAdvice" transaction-manager="txManager">
   	<tx:attributes>
   	<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
   		<tx:method name="*" propagation="REQUIRED"/>
   		<!-- 以下方法都是可能设计修改的方法，就无法设置为只读 -->
   		<tx:method name="add*" propagation="REQUIRED"/>
   	 	<tx:method name="del" propagation="REQUIRED"/>
   		<tx:method name="update" propagation="REQUIRED"/>
   		<tx:method name="save" propagation="REQUIRED"/>
   		<tx:method name="*" read-only="true" />
   	</tx:attributes>
   </tx:advice>
</beans>